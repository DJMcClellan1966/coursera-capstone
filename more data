---
title: "Untitled"
author: "DJM"
date: "October 14, 2015"
output: html_document
---
```{r}
setwd("~/R/capstone/capstone")
rm(list = ls())
library(rjson)

path <- "yelp_academic_dataset_checkin.json"
con <- file(path, "r")
lines <- readLines(con, n = 5000)
ch <- lapply(X=lines, fromJSON)

path <-"yelp_academic_dataset_business.json"
con <- file(path, "r")
lines <- readLines(con, n = 5000)
bus <- lapply(X=lines, fromJSON)

path <-  "yelp_academic_dataset_tip.json" 
con <- file(path, "r")
lines <- readLines(con, n = 5000)
tips <- lapply(X=lines, fromJSON)

path <-  "yelp_academic_dataset_user.json"
con <- file(path, "r")
lines <- readLines(con, n = 5000)
user <- lapply(X=lines, fromJSON)

path <- "yelp_academic_dataset_review.json"
con <- file(path, "r")
lines <- readLines(con, n = 5000)         
review <- lapply(X = lines, fromJSON)

jsearch <- function(json, bid){
  for(obj in json){
    if(obj$business_id == bid){
      info <- list(obj$business_id,
                   obj$categories,
                   obj$stars,
                   obj$review_count,
                   obj$state)
   
      return(info)
      break
    }
  }
}


df <- data.frame(business_id = as.character(),
                 category = as.character(),
                 stars = as.numeric(),
                 review_count = as.numeric(),
                 state = as.character())
                

i <- 1
j <- 1
for(d in bus){
  business_id <- as.character(jsearch(bus, d[[1]])[1])
  category <- as.character(jsearch(bus, d[[1]])[2])
  stars <- as.numeric(jsearch(bus, d[[1]])[3])
  review_count <- as.numeric(jsearch(bus, d[[1]])[4])
  state <- as.character(jsearch(bus, d[[1]])[5])
  
  
    entry <- data.frame(business_id,
                        category,
                        stars,
                        review_count,
                        state)
    
    df <- rbind(df, entry)
    i <- i + 1
    print(i)
  
  print(paste("business processed..!", j))
  j <- j + 1
}

write.csv(df, file = "yelp_business.csv", row.names = F)

yb<- read.csv("yelp_business.csv")
head(yb)
tail(yb)
```

```{r}
jsearch1<- function(json, bid){
  for(obj in json){
    if(obj$business_id == bid){
      info1 <- list(obj$business_id,
                    obj$text,
                    obj$user_id,
                    obj$likes)
                   
   
      return(info1)
      break
    }
  }
}

df1 <- data.frame(businesss_id = as.character(),
                  tip <- as.character(),
                  user_id <- as.character(),
                  likes <- as.numeric())
                  

k <- 1
l <- 1
for(d in tips){
  
  business_id<- as.character(jsearch1(tips, d[[3]])[1])
  tip <- as.character(jsearch1(tips, d[[3]])[2])
  user_id <- as.character(jsearch1(tips, d[[3]])[3])
  likes <- as.numeric(jsearch1(tips, d[[3]])[4])
  
    entry1 <- data.frame(business_id,
                         tip,
                         user_id,
                         likes)
                        
    
    df1 <- rbind(df1, entry1)
    k <- k + 1
    print(k)
  
  print(paste("business processed..!", l))
  l <- l + 1
}

write.csv(df1, file = "yelp_tips.csv", row.names = F)

yt<- read.csv("yelp_tips.csv")
head(yt)
tail(yt)

```


```{r}
jsearch2<- function(json, uid){
  for(obj in json){
    if(obj$user_id == uid){
      info2 <- list(obj$user_id,
                    obj$votes,
                    obj$average_stars,
                    obj$review_count,
                    obj$friends)
                    
      return(info2)
      break
    }
  }
}

df2 <- data.frame(user_id = as.character(),
                  votes = as.character(),
                  average_stars = as.numeric(),
                  review_count = as.numeric(),
                  friends = as.character())


m <- 1
n <- 1
for(e in user){

  user_id<- as.character(jsearch2(user, e[[5]])[1])
  votes <- as.character(jsearch2(user, e[[5]])[2])
  average_stars <- as.numeric(jsearch2(user, e[[5]])[3])
  review_count <- as.numeric(jsearch2(user, e[[5]])[4])
  friends <- as.character(jsearch2(user, e[[5]])[5])
  
    entry2 <- data.frame(user_id,
                         votes,
                         average_stars,
                         review_count,
                         friends)
                         
                        
    
    df2<- rbind(df2, entry2)
    m <- m + 1
    print(m)
  
  print(paste("user processed..!", n))
  n <- n + 1
}

write.csv(df2, file = "yelp_user.csv", row.names = F)

yu<- read.csv("yelp_user.csv")
head(yu)
tail(yu)
                
```

```{r}
jsearch3 <- function(json, bid){
  for(obj in json){
    if(obj$business_id == bid){
      info3 <- list(obj$business_id,
                    obj$stars,
                    obj$type,
                    obj$text)
   
      return(info3)
      break
    }
  }
}


df3 <- data.frame(businesss_id = as.character(),
                  stars = as.numeric(),
                  type = as.character(),
                  text = as.character())
                

o <- 1
p <- 1
for(f in review){
  
  business_id<- as.character(jsearch3(review, f[[8]])[1])
  stars <- as.numeric(jsearch3(review, f[[8]])[2])
  type <- as.character(jsearch3(review, f[[8]])[3])
  text <- as.character(jsearch3(review, f[[8]])[4])
  
  
    entry3 <- data.frame(business_id,
                         stars,
                         type,
                         text)
    
    df3 <- rbind(df3, entry3)
    o <- o + 1
    print(o)
  
  print(paste("business processed..!", p))
  p <- p + 1
}

write.csv(df3, file = "yelp_review.csv", row.names = F) 

yr<- read.csv("yelp_review.csv")
head(yr)
tail(yr)
```

```{r}
jsearch4 <- function(json, bid){
  for(obj in json){
    if(obj$business_id == bid){
      info4 <- list(obj$business_id,
                    obj$checkin_info)
   
      return(info4)
      break
    }
  }
}


df4 <- data.frame(businesss_id = as.character(),
                  checkin_info = as. ())
                  
                  
                

q <- 1
r <- 1
for(g in ch){
  
  business_id<- as.character(jsearch4(ch, g[[3]])[1])
  checkin_info <- as.numeric(jsearch4(ch, g[[3]])[2])
  
    entry4 <- data.frame(business_id,
                         checkin_info)
                         
    
    df4 <- rbind(df4, entry4)
    q <- q + 1
    print(q)
  
  print(paste("business processed..!", r))
  r <- r + 1
}

write.csv(df4, file = "yelp_checkin.csv", row.names = F) 

yc<- read.csv("yelp_checkin.csv")
head(yc)
tail(yc)

```


##Naive Bayes
```{r}
library(dplyr)
uniqyr <- unique(yr)
yreview <- arrange(uniqyr, business_id)
yr1 <- select(yreview, -(business_id), -(type))
str(yr1)            
table(yr1$stars)

st <- filter(yr1, stars == 5| stars == 1)


library(tm)
yreview_corpus <- Corpus(VectorSource(st$text))

corpus_clean <- tm_map(yreview_corpus, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean,removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
corpus_clean <- tm_map(corpus_clean, PlainTextDocument)

yreview_dtm <- DocumentTermMatrix(corpus_clean)

yraw_train <- st[1:102,]
yraw_test <- st[103:146,]
yr_dtm_train <- yreview_dtm[1:102,]
yr_dtm_test <- yreview_dtm[103:146,]
yr_corpus_train <- corpus_clean[1:102]
yr_corpus_test <- corpus_clean[103:146]

prop.table(table(yraw_train$stars))
prop.table(table(yraw_test$stars))

library(wordcloud)
wordcloud(yr_corpus_train, min = 25, random.order = FALSE)

good <- subset(yraw_train, stars =5)
bad <- subset(yraw_train, stars = 1)
okay <- subset(yraw_train, stars = 1.5:4.5)

wordcloud(st$text, max.words = 25,
          scale = c(3, 0.5))
wordcloud(bad$text, max.words = 25,
          scale = c(3, 0,5))
wordcloud(okay$text, max.words = 25, 
          scale = c(3, 0.5))

findFreqTerms(yr_dtm_train,1)
yr_dict <- stopwords(findFreqTerms
                 (yr_dtm_train, 1))

review_train <- DocumentTermMatrix(yr_corpus_train,
                                   list(dictionary= yr_dict))

review_test <- DocumentTermMatrix(yr_corpus_test,
                                  list(dictionary = yr_dict))


convert_counts <- function(x){
  x <- ifelse(x > 0, 1, 0)
  x <- factor(x, levels = c(0, 1),
               labels = c('"No"','"Yes"'))
  return(x)
}

review_train <- apply(review_train,
                      MARGIN = 2,
                      convert_counts)
review_test <- apply(review_test,
                     MARGIN = 2,
                     convert_counts)

library(e1071)
review_classifier <- naiveBayes(review_train, yraw_train$stars)

review_test_pred <- predict(review_classifier, review_test)

library(gmodels)
CrossTable(review_test_pred, yraw_test$stars,
           missing.include = FALSE,
                     dnn = c("predicited", "actual"))
```

```{r}

```

